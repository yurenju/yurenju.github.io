<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yuren's Info Area]]></title>
  <link href="http://yurenju.github.io/atom.xml" rel="self"/>
  <link href="http://yurenju.github.io"/>
  <updated>2014-05-25T10:36:59.891Z</updated>
  <id>http://yurenju.github.io/</id>
  <author>
    <name><![CDATA[Yuren Ju]]></name>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Bugzilla requests to trello]]></title>
    <link href="http://yurenju.github.io/2014/05/23/bugzilla-requests-to-trello/"/>
    <id>http://yurenju.github.io/2014/05/23/bugzilla-requests-to-trello/</id>
    <published>2014-05-23T08:37:13.000Z</published>
    <updated>2014-05-25T10:36:43.000Z</updated>
    <content type="html"><![CDATA[<p>自從在 Mozilla 工作一陣子後開始會有很多 bugzilla 來的 request，像是 review, needinfo 或是 feedback feedback request 之類的，之前我一直用 bugzilla 上面的 My Dashboard 來管理這件事情，不過後來我發現除了 request 以外，Dashboard 並不能幫我管理其他的工作項目，所以我就開始尋找我的 task 管理之路⋯。</p>
<a id="more"></a>

<p>之前雖然就有用過 trello 管理各式各樣的事情（結婚、COSCUP、工作上的事情），不過後來因為他不能自動把 bugzilla request 轉換成 trello card 後就比較少用了，而這次又回頭來想想是不是有辦法用 trello 來管理，仔細想想我只要用 ifttt 把信箱裡面出現 &quot;review requested:&quot; 這個字串的寄到 trello 提供的信箱就收工啦！所以我就開始這樣設定了</p>
<p>不過首先我第一個遇到的問題是，當你收到出現 &quot;review requested:&quot; 就寄到 trello 提供的信箱會遇到無窮重寄的問題，因為就算你寄了 &quot;review requested:&quot; 的信之後，gmail 的 search query 還是會 filter 到一樣的關鍵字，然後 ifttt 又會重複寄一次，所以每次收到 review request 就會不同的鬼打牆重複寄⋯，還好 ifttt 寄信的時候可以更改信件標題內文，所以我只要加入特殊的字串（像是 #trello）到信件內文，接著過濾條件用減號 -trello 即可。</p>
<p>首先先到 trello 的側邊欄找出 trello 提供的 email，寄過去就會自動轉成 card：</p>
<p><img src="http://i.imgur.com/cUNRyr7.png" alt="Trello email"></p>
<p>接下來就是 ifttt 發揮的時候了，建立一個新的 recipe，並且選擇用 gmail 作為來源，條件是 New email from search，並且用 subject:(review-requested:) -trello 作為過濾條件：</p>
<p><img src="http://i.imgur.com/4hAgEKe.png" alt="gmail trigger"></p>
<p>動作則是用 gmail 寄送郵件寄到 trello 提供的 email，並且在內文多加一個 #trello 讓前面的搜尋條件可以排除這封信件，另外我的 trello 有開一個 review 的標簽，所以我還在標題多加了 #review：</p>
<p><img src="http://i.imgur.com/jgu3q7D.png" alt="Send email to trello"></p>
<p>這樣就好了，之後 review request 就會自動加到 trello 裡面，而我也可以把自己的工作手動輸入。</p>
<p><img src="http://i.imgur.com/D8fn0aT.png" alt="trello screenshot"></p>
<p>另外這邊有另外一個 trello 的 <a href="https://github.com/thedufer/Trello-Bookmarklet-Maker" target="_blank">bookmarklet</a> 也很好用，可以把網頁轉換成 trello card。</p>
]]></content>
    <category scheme="http://yurenju.github.io/tags/bugzilla/" term="bugzilla"/>
    <category scheme="http://yurenju.github.io/tags/trello/" term="trello"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[g0v Hackath8n]]></title>
    <link href="http://yurenju.github.io/2014/04/19/g0v-hackath8n/"/>
    <id>http://yurenju.github.io/2014/04/19/g0v-hackath8n/</id>
    <published>2014-04-19T12:54:49.000Z</published>
    <updated>2014-04-19T13:30:26.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/yurenju/13911947031" title="g0v Hackath8n by Yuren Ju, on Flickr" target="_blank"><img src="https://farm4.staticflickr.com/3804/13911947031_3a2732df1a_c.jpg" width="800" height="451" alt="g0v Hackath8n"></a></p>
<p>今天去 g0v 真的是蠻有趣的，原本要幫 Kuang-Che Liu 弄鄉民關心你的聯絡人，不過因為他早上沒來的關係所以我就開始找看看有沒有其他有趣的 project 可以作。聽完大家非常大一輪的介紹後，我決定去找立委投票指南的朋友們看看那邊有沒有什麼需要幫忙的。</p>
<p>然後今天就幫忙弄了兩個小東西：</p>
<ol>
<li>從<a href="http://sunshine.cy.gov.tw/GipOpenWeb/wSite/sp?xdUrl=/wSite/SpecialPublication/baseQuery.jsp" target="_blank">陽光法案主題網</a>把所有立委的財產申報資料全部都爬下來</li>
<li>指令界面版本的 <strong>臺北市</strong> 地價公告現值查詢</li>
</ol>
<p>這兩個是有相關的，因為陽光法案李立委的財產申報資料裡面是有含土地資訊的，所以可以利用這個資訊進一步查詢到公告地價現值。</p>
<p>第一個爬完的資料已經放到 github 上面了，你可以看到一堆立法委員的<a href="https://github.com/g0v/twly_crawler/tree/master/pdf" target="_blank">公開財產資料</a>（笑）</p>
<p><img src="http://i.imgur.com/kxKAYJo.png" alt="enter image description here"></p>
<p>接下來就是可以利用 PDF 裡面的資料進一步了解立委所持有的土地的目前公告現值。這個功能目前還沒 merge，不過 <a href="https://github.com/g0v/twly_crawler/pull/9" target="_blank">pull request 在這</a>如果你有興趣的話。首先你要有 nodejs，接下來用 npm 把相依套件裝一裝～</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">npm</span> i
</pre></td></tr></table></figure>

<p>好了，接下來就可以玩了，最近割闌尾的立委很夯，我就隨便挑一個來試試 XDD，我從他的公開財產資料表裡面得到一筆資訊：『臺北市信義區信義段三小段0018-0000』，而指令就是這樣下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>node lq 信義區,信義段三小段,0018-0000
</pre></td></tr></table></figure>

<p>答案就會出來了：<code>公告現值 (元/平方公尺): 848,000</code>，因為財產資料裡面提到面積為 891 平方公尺，權力範圍為 2287/100000，依照這些資訊我們可以算出該資產目前的現值是多少：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">848000 * 2287/100000 * 891 </span>=<span class="string"> 17279840.16</span>
</pre></td></tr></table></figure>

<p>而根據該筆受贈的土地原本價格約為 900 餘萬，所以這筆土地幾乎漲了兩倍，算是很不錯的投資呢～</p>
]]></content>
    <category scheme="http://yurenju.github.io/tags/g0v/" term="g0v"/>
    <category scheme="http://yurenju.github.io/tags/hackath8n/" term="hackath8n"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Bug of Makefile in MinGW]]></title>
    <link href="http://yurenju.github.io/2014/02/07/bug-of-makefile-in-mingw/"/>
    <id>http://yurenju.github.io/2014/02/07/bug-of-makefile-in-mingw/</id>
    <published>2014-02-07T02:56:50.000Z</published>
    <updated>2014-02-07T03:04:58.000Z</updated>
    <content type="html"><![CDATA[<p>昨天踩到了一個讓人很沮喪的 bug。</p>
<p>一般來說在 Makefile 我們可以用 $(shell pwd) 拿到像這樣 style 的路徑</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$(</span>shell <span class="keyword">pwd</span>)
/home/yurenju/gaia
</pre></td></tr></table></figure>

<p>如果要在 Windows 的 MinGW 底下用的話，可以用大寫 W 參數可以拿到這樣 style 的路徑：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$(</span>shell pwd -<span class="constant">W</span>)
<span class="constant">C</span><span class="symbol">:/home/yurenju/gaia</span>
</pre></td></tr></table></figure>

<p>然後昨天踩到的雷是，如果你用 <code>-include</code> 引入了另外一個 Makefile 後（比如說 common.mk），你在 common.mk 裡面執行 <code>$(shell pwd -W)</code> 竟然會出錯！而且同樣的用法如果沒有用 -include 的時候是完全會動的。</p>
<p>解法呢？感謝 <a href="http://www.postgresql.org/message-id/4D0BF549.6030600@dunslane.net" target="_blank">PostgreSQL</a> 的先烈告訴我們了答案，用 <code>sh -c</code> 去執行竟然就好了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$(</span>shell sh -c <span class="string">"pwd -W"</span>)
</pre></td></tr></table></figure>

<p>見鬼了，這哪招啊...</p>
]]></content>
    <category scheme="http://yurenju.github.io/tags/MinGW/" term="MinGW"/>
    <category scheme="http://yurenju.github.io/tags/Make/" term="Make"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Firefox Addon - No more Facebook redirect]]></title>
    <link href="http://yurenju.github.io/2014/01/19/firefox-addon---no-more-facebook-redirect/"/>
    <id>http://yurenju.github.io/2014/01/19/firefox-addon---no-more-facebook-redirect/</id>
    <published>2014-01-19T14:50:55.000Z</published>
    <updated>2014-01-19T16:10:14.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/4xM1CTC.jpg" alt="Ad-tech London 2010"></p>
<p>上週跟同事討論到 Facebook 的重導很慢（然後他也不想讓 Facebook 經手他看的內容），上週末的時候寫了一個簡單的 Firefox Addon，也跟大家分享一下 Firefox Addon 要怎麼開始。</p>
<p><a href="https://addons.mozilla.org/firefox/addon/flink-removal/" target="_blank">Addon 網址在這</a>。</p>
<a id="more"></a>

<p>簡單的說，當瀏覽 Facebook 的時候，如果點擊了任何外部連結，Facebook 會把你導到 [www|m].facebook.com/l.php，記錄瀏覽資訊後再重導到你真正要去的網頁，正常就算了，有時候這個網頁真的很慢，所以這個 Addon 的目的就是讓外部連結直接會連到你要去的網站，而不透過 l.php。</p>
<h1 id="-">觀察</h1>
<p>首先要知道的是 Facebook 到底是怎麼運作的，你可以用 Chrome 或 Firefox 的 Inspector 去看一下在 Facebook 上面的聯結，它們大概都長這樣：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://www.facebook.com/l.php?u=http%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt21322…VqWCyL6SFp8kx-LEqFueJpHHOgiCdehrkANpy9TmQPIwigdZlarFf-CE3OTdRtxkHw&amp;s=1"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">rel</span>=<span class="value">"nofollow"</span> <span class="attribute">onmouseover</span>=<span class="value">"LinkshimAsyncLink.swap(this, &quot;http:\/\/www.imdb.com\/title\/tt2132285\/&quot;);"</span> <span class="attribute">onclick</span>=<span class="value">"LinkshimAsyncLink.referrer_log(this, &quot;http:\/\/www.imdb.com\/title\/tt2132285\/&quot;, &quot;\/si\/ajax\/l\/render_linkshim_log\/?u=http\u00253A\u00252F\u00252Fwww.imdb.com\u00252Ftitle\u00252Ftt2132285\u00252F&amp;h=5AQHzTjjK&amp;rend…s6tVqWCyL6SFp8kx-LEqFueJpHHOgiCdehrkANpy9TmQPIwigdZlarFf-CE3OTdRtxkHw&quot;);"</span>&gt;</span>http://www.imdb.com/title/tt2132285/<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
</pre></td></tr></table></figure>

<p>簡單的說他會把 href 改成重導要去的網頁，以上面這個例子原本的網頁是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="label">http:</span>//www<span class="preprocessor">.imdb</span><span class="preprocessor">.com</span>/title/tt2132285/
</pre></td></tr></table></figure>

<p>Facebook 會把這個網址用 u 這個變數傳給 l.php，然後再加點料</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>http:<span class="regexp">//www</span>.facebook.com/l.php?u=http<span class="variable">%3A</span><span class="variable">%2F</span><span class="variable">%2Fwww</span>.imdb.com<span class="variable">%2Ftitle</span><span class="variable">%2Ftt0335266</span><span class="variable">%2F</span><span class="variable">%3Fref_</span><span class="variable">%3Dnm_flmg_dr_5</span>&h=NAQFr_7Es&enc=AZOPR95X8Izo4FNz_xIAWKmxnZtiLORKXsBt5y9tDUyKGxr9M_aK-BYpiNfmXZUjl6zBJeO8ybY0L6GeQxfcjstytlfv7rPp_j2uWRG--l0ooqXVawG5xUeoa2G5sAjAymHJrNkknafihUn_e7z1jOYs7pTILelDMboyyRuMGo47aw&<span class="keyword">s</span>=<span class="number">1</span>
</pre></td></tr></table></figure>

<p>但是當你滑鼠移上去的時候看起來卻是原本的網址，其實是因為他用了 onmouseover，當你滑鼠移上去的時候他會換正確的網址給你，當點擊的時候，又把 l.php 換給你。</p>
<h1 id="-">實作</h1>
<p>經過試了幾次之後，其實要做的事情很簡單，只要看到 facebook.com/l.php 就直接把 u 參數的字串做 url decode，接著把 onclick 移除掉就大功告成了。</p>
<p>接下來的事情就簡單了，到 Firefox 官網<a href="https://developer.mozilla.org/en-US/Add-ons/SDK" target="_blank">下載 Addon 開發套件 cfx</a>，下載解壓縮後，執行下面的指令進入開發環境：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">source</span> CFX_DIR/bin/activate
</pre></td></tr></table></figure>

<p>這時候 shell propmt 會多出 <code>(addon-sdk-VERSION)</code> 代表你已經進入了開發環境。接下來照著官網的步驟就可以建立你自己的 Addon。</p>
<p>然後我們使用到最主要的 module 是 <code>page-mod</code>，這個模組可以在瀏覽特定網站時執行指定的 javascript，所以我們就使用這個模組，讓瀏覽器開啟 Facebook 之後執行下面的 Javascript （這個 Addon 簡單到我可以直接把主要的源碼貼上來 XD）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">const</span> RE_REDIRECT = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[?|&]u=([^&;]+?)(&|#|;|$)'</span>);

MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
<span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span><span class="params">(mutations, observer)</span> {</span>
  <span class="keyword">var</span> links = document.querySelectorAll(<span class="string">'a[href*="facebook.com/l.php"]'</span>);

  <span class="built_in">Array</span>.prototype.forEach.call(links, <span class="function"><span class="keyword">function</span><span class="params">(link)</span> {</span>
    <span class="keyword">var</span> matched = link.search.match(RE_REDIRECT);
    <span class="keyword">if</span> (matched) {
      link.removeAttribute(<span class="string">'onclick'</span>);
      link.href = <span class="built_in">decodeURIComponent</span>(matched[<span class="number">1</span>]);
    }
  });
});

observer.observe(document, {
  subtree: <span class="literal">true</span>,
  attributes: <span class="literal">true</span>
});
</pre></td></tr></table></figure>

<p>特別感謝 <code>朕知道了</code> 擴充套件，我看了一下才知道用 <code>MutationObserver</code> 可以偵測 DOM 改變，好用！</p>
<p>MutationObserver 的用途是偵測到 DOM 有改變的時候就執行對應的代碼，而我們這邊直接聽 document 改變的事件。當 DOM 改變的時候，我們就直接找出 a tag 裡面的 href 包含 facebook.com/l.php 的所有 elements，所以不管是 http, https 或是 www.facebook.com, m.facebook.com 都可以用這個條件選取，CSS selector 長這樣：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>document.querySelectorAll(<span class="string">'a[href*="facebook.com/l.php"]'</span>);
</pre></td></tr></table></figure>

<p><code>*=</code> 真是好物啊，大家可以讀一下 <a href="http://www.w3schools.com/cssref/sel_attr_contain.asp" target="_blank">w3schools</a> 上面的說明，可以讓你選取屬性包含特定字串的 element。選取到之後要做的事情就簡單啦，用 Regular Expression 把 <code>u</code> 拿出來，再透過 <code>decodeURIComponent()</code> 把 uri encode 的字串解回來，放到 href，最後移除掉 onclick 就收工了！</p>
<p>最後 source code 放在 <a href="https://github.com/yurenju/nomore-fb-redirect" target="_blank">github</a> 上面，有興趣的就載來看看吧。</p>
]]></content>
    <category scheme="http://yurenju.github.io/tags/Firefox/" term="Firefox"/>
    <category scheme="http://yurenju.github.io/tags/Addon/" term="Addon"/>
    <category scheme="http://yurenju.github.io/tags/Facebook/" term="Facebook"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Gaia Build System]]></title>
    <link href="http://yurenju.github.io/2014/01/02/gaia-build-system/"/>
    <id>http://yurenju.github.io/2014/01/02/gaia-build-system/</id>
    <published>2014-01-02T03:37:14.000Z</published>
    <updated>2014-01-02T06:39:27.000Z</updated>
    <content type="html"><![CDATA[<p>(這篇部分的資訊我也寫到 <a href="https://developer.mozilla.org/en-US/Firefox_OS/Platform/Gaia/Build_System_Primer#Build_process" target="_blank">MDN</a> 上面去了。）</p>
<p>Gaia Build System 基本上是由 make, node.js script 跟 xpcshell script 所構成的（以前還有 Python Script 不過已經被消滅了）。前兩個大家都清楚，所以只介紹一下 xpcshell。</p>
<p>xpcshell 是一個放在 xulrunner 裡面的一個執行環境，它的用處跟 node.js 一樣，可以直接執行 javascript，所以可以拿它來處理一些 build system 要做的一些工作，另外 gaia 的 build system 也有使用 commonjs 的環境，所以基本上使用 xpcshell 跟用 node.js 寫東西差不多，只是可以用的 library 跟 API 不同。</p>
<a id="more"></a>

<p>當你執行 <code>make</code> 的時候實際上會發生的事情是 make 會去設置 xpcshell 跟 node.js 的執行環境，並且在不同的地方他們兩種執行環境，我相信 node.js 比較容易理解，但為什麼需要在 xpcshell 上面可以跑呢？因為這樣 build system 就可以在 firefox extension 上面跑，下面的影片展示了如何在 Firefox extension 裡面直接造出並且執行 Gaia。</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/cDz7YORcm3k" frameborder="0" allowfullscreen></iframe></div>


<h2 id="build-process">Build process</h2>
<p>當你執行 <code>make</code> 會發生的事情如下：</p>
<p><img src="http://i.imgur.com/hdrxYfT.png" alt="Gaia build process"></p>
<dl>
 <dt>
  Looking for .b2g.mk &amp; local.mk</dt>
 <dd>
  build system 會去找 local.mk 跟 .b2g.mk 是否存在，有找到的話會引入他們</dd>
 <dt>
  Download xulrunner</dt>
 <dd>
  因為 xpcshell scripts 全都要在 xulrunner 上面跑，所以要先下載 xulrunner</dd>
 <dt>
  preference.js</dt>
 <dd>
  產生給 Firefox OS 用，預設的 preferences，最後的產出是 user.js，Gaia 執行的時候 gecko 會讀取這個檔案，另外環境變數（像是 DEBUG=1）會影響到這些數值。</dd>
 <dt>
  variant.js</dt>
 <dd>
 會從 GAIA_DISTRIBUTION_DIR/variant.json 讀取客製化 gaia 所需的設定資訊，這可以拿來針對不同電信商以及區域產生不同的 app 集合，桌布以及鈴聲。
  </dd>
 <dt>
  applications-data.js</dt>
 <dd>
 有些 app 會需要一些初始化的資訊如 homescreen 要如何排列 app 跟網頁瀏覽器預設的搜尋引擎，這個 script 會負責產生這些資料檔案
  </dd>
 <dt>
  app makefiles</dt>
 <dd>
 如果 app 的目錄底下有 makefile 的話在這個時間點會被執行
  </dd>
 <dt>
  setup test-agent</dt>
 <dd>
 設置 test-agent 是兩個 make rules "test-agent-config" 跟 "test-agent-bootstrap-apps"，這兩個會針對每個 app 設定測試所需的環境。
</dd>
 <dt>
  webapp-optimize.js</dt>
 <dd>
 拿來做 minify javascript，把 l10n 的檔案集合成一個 json 以及產生預設語言的 HTML 檔案等等最佳化的一些步驟。
  </dd>
 <dt>
  webapp-zip.js</dt>
 <dd>
 把每個 app 壓縮成 application.zip 並且放到 profile 目錄底下</dd>
 <dt>
  optimize-clean.js</dt>
 <dd>
  如果針對預設語言有產生 html 檔案的話，會在這邊被刪除</dd>
 <dt>
  contact</dt>
 <dd>
 如果 GAIA_DISTRIBUTION_DIR 裡面有預設的聯絡人資訊在這邊會被複製到 profile 目錄
  </dd>
 <dt>
  extensions</dt>
 <dd>
 複製 GAIA_DIR/tools/extensions 裡面的擴充套件到 profile，不同的設定會複製不同的擴充套件。
  </dd>
 <dt>
  settings.js</dt>
 <dd>
  產生給 Gaia 用預設的 settings</dd>
 <dt>
  create-default-data</dt>
 <dd>
 把一些預設的複製到 profile 目錄底下
  </dd>
 <dt>
  additional-extensions.js</dt>
 <dd>
 下載特定的擴充套件並且複製到 profile 目錄</dd>
</dl>

]]></content>
    <category scheme="http://yurenju.github.io/tags/Firefox OS/" term="Firefox OS"/>
    <category scheme="http://yurenju.github.io/tags/Gaia/" term="Gaia"/>
    <category scheme="http://yurenju.github.io/tags/Build system/" term="Build system"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[2013 Review]]></title>
    <link href="http://yurenju.github.io/2013/12/22/2013-review/"/>
    <id>http://yurenju.github.io/2013/12/22/2013-review/</id>
    <published>2013-12-22T13:48:39.000Z</published>
    <updated>2013-12-22T15:57:46.000Z</updated>
    <content type="html"><![CDATA[<p>2013 快要結束了，在最後一個月回顧一下今年做過的事情。</p>
<h2 id="-">旅行</h2>
<p>今年是非常瘋狂的一年，加入了 Mozilla 的緣故今年有非常多機會可以到國外出差，而今年也自己出去了兩個國家旅行，所以光是今年就造訪了七個國家，出差的有<a href="http://500px.com/yurenju/stories/73275/berlin-work-week" target="_blank">德國柏林</a>、<a href="http://500px.com/yurenju/stories/86663/madrid-work-week" target="_blank">西班牙馬德里</a>、中國上海、<a href="http://500px.com/yurenju/stories/1095874/oslo-work-week" target="_blank">挪威奧斯陸</a>與<a href="http://500px.com/yurenju/stories/3195082/california" target="_blank">美國加州</a>。</p>
<p>自己則去了<a href="http://500px.com/yurenju/stories/82703/" target="_blank">泰國曼谷</a>跟日本的<a href="http://500px.com/yurenju/stories/84121/" target="_blank">京都</a></p>
<p>國內旅遊今年比較少，說得出有印象的是去<a href="https://www.facebook.com/yurenju/media_set?set=a.10151824597151631.1073741832.700771630&amp;type=3" target="_blank">台中后里、新社騎腳踏車跟賞花</a>還有到宜蘭釣小管，年初的時候還有去<a href="https://www.facebook.com/yurenju/media_set?set=a.10151347453206631.442296.700771630&amp;type=1" target="_blank">平溪</a>走走。</p>
<a id="more"></a>

<h2 id="coscup">COSCUP</h2>
<p>今年最大的成就就是籌辦了台灣最大的開放源碼研討會 <a href="http://coscup.org/" target="_blank">COSCUP 開源人年會</a>的議程主席，這次主要達成的成就是總共有超過 100 個議程，並且最多有八場議程同時進行，而由於設置社群議程的關係也有相當多元的議程包括 R 語言，Open Street Map，g0v 等等，為了籌備這個活動真是有段時間天天都被信件淹沒⋯。</p>
<p>順帶一提也第一次做了 COSCUP 開場，超酷的！</p>
<h2 id="-">演講</h2>
<p>演講的部分，今年講了：</p>
<ol>
<li><a href="http://mozilla.com.tw/events/web_app_days/" target="_blank">Firefox OS App Day</a> - Remote Debugger &amp; App Template</li>
<li><a href="http://wmmks.csie.ncku.edu.tw/tsoc2013/index.php?option=com_content&amp;view=article&amp;id=25" target="_blank">台灣軟體創作達人</a> - Firefox OS -- 隱藏在 OS 背後的技術與細節 南北各一場三小時的演講</li>
<li>KSDG - <a href="https://speakerdeck.com/yurenju/customize-you-firefox-os" target="_blank">Customize your Firefox OS</a></li>
<li><a href="http://www.digitimes.com.tw/seminar/iii_20131217/index.asp?content2.htm" target="_blank">2013 HTML5技術研討會</a> - Firefox OS inside out</li>
<li>TOSSUG - <a href="https://www.evernote.com/shard/s92/sh/c9745134-2ec5-4372-9067-f9db4989babd/dece8e48bdaba48be7635e083eae5422" target="_blank">How-to setup gaia development</a></li>
<li>ConCom (FLOSS 社群經營與研討會籌備者聚會) - 主持討論議程</li>
</ol>
<p>不是特別多，今年我覺得也講的不是特別好，明年要多多改善品質。</p>
<h2 id="hackathon">Hackathon</h2>
<p>今年也是非常有趣的一件事情，我跟同事們一起參加了 <a href="http://nodeknockout.com/" target="_blank">Node.js Knockout</a>，這邊有一些<a href="https://plus.google.com/photos/105085872112003472960/albums/5944096573761646081" target="_blank">活動照片</a>。這次我們做了一個音樂指揮家的遊戲 <a href="https://github.com/moz-art/mozart" target="_blank">Mozart</a>，將你的電腦與手機連線，把手機當作指揮棒就可以控制由電腦播出交響樂的節奏，更酷的是如果你連接多台電腦，不同的電腦可以發出交響樂團中不同聲部的聲音。這邊有由同事 Evan 介紹 Mozart：</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/JvXZ2bpX15M" frameborder="0" allowfullscreen></iframe></div>


<p>而這個 Project 獲得台灣區的第二名，並且在全球比賽中差了 0.12 分飲恨，在<a href="http://nodeknockout.com/entries?sort=innovation" target="_blank">創新獎中排名第二</a>，差一點得到創新獎。不過這次還是學到很多東西，真是非常有趣的體驗 :-)</p>
<h2 id="-">攝影</h2>
<p>我覺得今年應該是沒有進步，不過選出自己覺得最好的五張，希望明年的 Top 5 可以更好。</p>
<p><img src="http://ppcdn.500px.org/30305697/f0867188c8f2be29107dc0591e8401ca3582d4bb/5.jpg" alt="琵琶湖疏水夜纓"></p>
<p>剩下的可以在 <a href="http://500px.com/yurenju/sets/2013_top_5" target="_blank">500px</a> 裡面找到</p>
<h2 id="-">明年目標</h2>
<p>訂明年的目標不簡單，不過我還是訂些比較實際的 LOL</p>
<ol>
<li>工作上希望 build system 可以大功告成，完成一套好用的 build tool</li>
<li>規劃、執行、溝通這三項能力希望可以更上一層樓</li>
<li>希望可以空出一段時間到另外一個城市深度旅行</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[CSS3 selector: not + checked + preceded]]></title>
    <link href="http://yurenju.github.io/2013/11/27/css3-selector-not-+-checked-+-preceded/"/>
    <id>http://yurenju.github.io/2013/11/27/css3-selector-not-+-checked-+-preceded/</id>
    <published>2013-11-27T10:23:07.000Z</published>
    <updated>2013-11-27T10:36:46.000Z</updated>
    <content type="html"><![CDATA[<p>CSS3 的 Selector 其實多了不少功能，以前需要用 javascript 才可以做出來的功能現在有時候只要用 CSS3 selector 就可以了，例如說：你有個 checkbox，如果按下這個 checkbox 後下面的 panel 才要顯示。一般來說我們可以用 javascript 對這個 panel 新增 class 來達到這個效果，不過用 CSS3 就又更簡單了。</p>
<p>你的 HTML 大概會長這樣：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span>
<span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"toggle"</span>&gt;</span>Show Panel<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"panel"</span>&gt;</span>
Panel
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</pre></td></tr></table></figure>

<p>而 CSS 只要這樣寫就可以控制 panel 顯示/隱藏了。下面 CSS 的意思是如果沒有 (:not) 選取 (:checked) 的時候，跟他同層 (~) 的 #panel 元素就隱藏起來。如果是緊鄰的元素也可以用 + 取代 ~。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="id">#toggle</span><span class="pseudo">:not(</span><span class="pseudo">:checked)</span> ~ <span class="id">#panel</span> <span class="rules">{
  <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p>你也可以在 jsFiddle 上面玩玩（點下面的 result）。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/W4BrH/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
]]></content>
    <category scheme="http://yurenju.github.io/tags/css/" term="css"/>
    <category scheme="http://yurenju.github.io/tags/css3/" term="css3"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Get origin from an URL]]></title>
    <link href="http://yurenju.github.io/2013/11/25/get-origin-from-a-url/"/>
    <id>http://yurenju.github.io/2013/11/25/get-origin-from-a-url/</id>
    <published>2013-11-25T03:46:06.000Z</published>
    <updated>2013-11-25T06:36:30.000Z</updated>
    <content type="html"><![CDATA[<p>假設今天你有這個網址：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="symbol">https:</span>/<span class="regexp">/twitter.com/yurenju</span><span class="regexp">/status/</span><span class="number">402368329135816704</span>
</pre></td></tr></table></figure>

<p>你要怎麼取得 <code>https://twitter.com</code> 呢？一般來說你可以用 regex 來達成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">getOrigin</span><span class="params">(url)</span> {</span>
  <span class="keyword">if</span> (!url) {
    <span class="keyword">return</span> <span class="literal">null</span>;
  } <span class="keyword">else</span> {
    <span class="keyword">var</span> matched = url.match(<span class="regexp">/^([a-zA-Z]+:\/\/.[^/]+).*/</span>);
    <span class="keyword">return</span> (matched.length &gt; <span class="number">1</span>) ? matched[<span class="number">1</span>] : <span class="literal">null</span>;
  }
}
</pre></td></tr></table></figure>

<p>不過如果你使用 Firefox 最新的 Nightly 就可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" target="_blank">URL()</a> 來達到這件事情（Chrome 似乎可以用 webkitURL）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">var</span> url = <span class="keyword">new</span> URL(YOUR_URL);
console.log(url.origin);
</pre></td></tr></table></figure>

<p>有興趣可以到 jsFiddle 上面用 Nightly 玩玩。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/6q7W2/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
]]></content>
    <category scheme="http://yurenju.github.io/tags/Firefox/" term="Firefox"/>
    <category scheme="http://yurenju.github.io/tags/Nightly/" term="Nightly"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Array.forEach for NodeList]]></title>
    <link href="http://yurenju.github.io/2013/11/21/arrayforeach-for-nodelist/"/>
    <id>http://yurenju.github.io/2013/11/21/arrayforeach-for-nodelist/</id>
    <published>2013-11-21T04:12:29.000Z</published>
    <updated>2013-11-23T15:50:38.000Z</updated>
    <content type="html"><![CDATA[<p>Javascript 裡面有個很實用的功能 forEach，跟其他語言的 for-each 一樣，你可以不需要 index 的狀況把陣列裡面的 object 一個個的丟出來，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];
arr.forEach(<span class="function"><span class="keyword">function</span><span class="params">(num)</span> {</span>
  <span class="comment">// do something...</span>
});
</pre></td></tr></table></figure>

<p>但是有個小問題，當你用 <code>document.getElementsByTagName()</code> 或是 <code>document.querySelectorAll()</code> 的時候會回傳 <code>HTMLCollection</code> 或是 <code>NodeList</code>因為不是 Array 的關係所以無法使用 forEach 操作。</p>
<p>但我已經回不去用 index 做 loop 的方式了！<a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList#Why_can%27t_I_use_forEach_or_map_on_a_NodeList.3F" target="_blank">MDN</a> 上面很貼心地跟你說要如何透過 Array 的 prototype 操作 NodeList 與 HTMLCollection：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">var</span> elements = document.getElementsByTagName(<span class="string">'a'</span>);
<span class="built_in">Array</span>.prototype.forEach.call(elements, <span class="function"><span class="keyword">function</span><span class="params">(a)</span> {</span>
    msg.innerHTML += a.innerHTML + <span class="string">'&lt;br&gt;'</span>;
});
</pre></td></tr></table></figure>

<p>你也可以直接在 <a href="http://jsfiddle.net/ezV62/" target="_blank">jsFiddle</a> 上面跑跑看。</p>
]]></content>
    <category scheme="http://yurenju.github.io/tags/Javascript/" term="Javascript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Build Firefox OS (Gaia) development environment]]></title>
    <link href="http://yurenju.github.io/2013/11/20/build-firefox-os-(gaia)-development-environment/"/>
    <id>http://yurenju.github.io/2013/11/20/build-firefox-os-(gaia)-development-environment/</id>
    <published>2013-11-20T08:33:57.000Z</published>
    <updated>2013-11-23T15:50:38.000Z</updated>
    <content type="html"><![CDATA[<p>開發 Gaia 可以在三種環境裡面開發：實體裝置、b2g desktop (Simulator) 或是 Firefox Nightly browser。我想要介紹的是如何在 Firefox Nightly 開發。</p>
<p>在作業系統的選擇上，我強烈建議使用 Mac OS 或是 Linux 其中一種。Windows 雖然也可以開發（而且我也經常測試這個平台）不過由於大多數的 Gaia Developer 都沒有使用 Windows，如果有任何問題也是比較不容易被發現並修正的，所以選擇 Mac OS or Linux 可以踩到比較少雷。</p>
<a id="more"></a>

<p>至於所需的軟體你需要以下軟體：</p>
<ol>
<li>git</li>
<li>make</li>
<li><a href="http://nightly.mozilla.org/" target="_blank">Firefox Nightly Browser</a></li>
</ol>
<p>首先你需要登入你的 github 帳號，並且到 <a href="https://github.com/mozilla-b2g/gaia/" target="_blank">Gaia 專案頁面</a>，按下右上角的 <strong>Fork</strong> 可以將 Gaia fork 到自己 github 帳號底下，結束後將會被導到你自己的 gaia repository，這個時候右邊中間會有一個 <strong>XXX clone URL</strong>，XXX 可能是 https or ssh。如果你設定好了正確的 ssh key 的話你可以用 ssh 的方式，否則請選擇 https 模式。</p>
<p>將該網址複製下來，並且打開終端機鍵入：</p>
<pre><code>$ git clone &lt;CLONE_URL&gt;
</code></pre><p>第一次 clone 要非常非常久，請去喝個下午茶再回來。結束後請用 git remote 來看你現在已經設定的 remote</p>
<pre><code>$ git remote -v
origin  git@github.com:&lt;USERNAME&gt;/gaia.git (fetch)
origin  git@github.com:&lt;USERNAME&gt;/gaia.git (push)
</code></pre><p>接下來你需要把 mozilla-b2g 的 repository 加入 remote</p>
<pre><code>$ git remote add b2g git@github.com:mozilla-b2g/gaia.git
</code></pre><p>需要這樣做的原因是因為我們需要用 pull request 把你的 change 發送到 github，你可以參考這張圖。</p>
<p><img src="http://1.bp.blogspot.com/-geO9X_h7_u8/UdVIBLDGqlI/AAAAAAAAeUU/9a51bh2FujM/s1375/Gaia+Development+workflow.png" alt="Gaia development workflow"></p>
<p>接下來只要打 DEBUG=1 make 就可以開始產生 gaia 的 profile 目錄了。指令完成後會產生一個 profile-debug 的目錄，最後用 Nightly Browser 打開它即可。</p>
<pre><code>$ nightly -profile ABSOLUTE_GAIA_PROFILE_PATH
</code></pre><p><img src="http://i.imgur.com/kKucvG6.png" alt="Running Gaia on Nightly"></p>
]]></content>
    <category scheme="http://yurenju.github.io/tags/Firefox OS/" term="Firefox OS"/>
    <category scheme="http://yurenju.github.io/tags/Gaia/" term="Gaia"/>
  </entry>
</feed>
